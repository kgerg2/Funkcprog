upperLower c
  | isLower c = toUpper c
  | isUpper c = toLower c
  | otherwise = c
digitToInt c
  | c `elem` ['0'..'9'] = ord c - ord '0'
  | c `elem` ['a'..'f'] = ord c - ord 'a' + 10
  | c `elem` ['A'..'F'] = ord c - ord 'A' + 10
sqr x = x * x
x ^ n
  | n == 0    = 1
  | odd n     = x * x^(n-1)
  | otherwise = sqr (x^(n `div` 2))
toBin 0 = []
toBin n = (n `mod` 2) : toBin (n `div` 2)
drop _ [] = []
drop n l@(x:xs)
  | n > 0     = drop (n-1) xs
  | otherwise = l
take _ [] = []
take n (x:xs)
  | n > 0     = x : take (n-1) xs
  | otherwise = []
insert a l@(x:xs)
 | a > x     = x:insert a xs
 | otherwise = a:l
insert a _   = [a]
sortMerge a  [] = a
sortMerge [] a  = a
sortMerge a@(x:xs) b@(y:ys)
 | x < y     = x : sortMerge b xs
 | otherwise = y : sortMerge a ys
combinations 0 _  = [[]]
combinations _ [] = []
combinations h (x:xs) = map (x:) (combinations (h-1) xs) ++ combinations h xs
pac' _  0 = [[]]
pac' [] _ = []
pac' (x:xs) a
 | x > a     = pac' xs a
 | otherwise = map (x:) (pac' xs (a-x)) ++ pac' xs a
pack' a b = reverse (pac' a b)
