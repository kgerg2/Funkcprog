map _ [] = []
map f (x:xs) = f x : map f xs
filter _ [] = []
filter f (x:xs)
  | f x       = x : filter f xs
  | otherwise = filter f xs
count _ [] = 0
-- count f = length . filter f
count f (x:xs)
  | f x       = 1 + count f xs
  | otherwise = count f xs
takeWhile _ [] = []
takeWhile f (x:xs)
  | f x       = x : takeWhile f xs
  | otherwise = []
dropWhile _ [] = []
dropWhile f l@(x:xs)
  | f x       = dropWhile f xs
  | otherwise = l
span _ [] = ([], [])
span f l@(x:xs)
  | f x       = (\(l1, l2) -> (x:l1, l2))(span f xs)
  | otherwise = ([], l)
iterate f x = x : iterate f (f x)
a $ b = a b
-- all f l = foldr (&&) True $ map f l
all f = foldr (\e a -> f e && a) True
any f l = foldr (||) False $ map f l
elem x l = any (x==) l
filters n = filter (`notElem` n)
zipWith f x y = map (\(a, b) -> f a b) $ zip x y
--differences l@(x:xs) = map (\(a, b) -> b-a) $ zip l xs
differences l@(x:xs) = zipWith (-) xs l
differences _ = []
--fibPairs = fibP (0, 1) where
--  fibP (a, b) = (a, b):fibP (b, a+b)
fibPairs = iterate (\(a, b) -> (b, a+b)) (0, 1)
group [] = []
group l@(x:xs) = (\(a, b) -> a : group b)(span (x==) l)
compress = map (\(x:xs) -> (length xs+1, x)) . group
pascalTriangle = iterate next_row [1] where
  next_row l@(x:xs) = 1 : zipWith (+) l (xs ++ [0])
sqrt a = improve a 1 where
  improve a x
    | abs ((x+a/x)/2 - x) < 1e-8 = x
    | otherwise                  = improve a $ (x+a/x)/2
uncurry a (b, c) = a b c
--decompress = concat . map (\(i, x) -> take i $ repeat x)
decompress = concatMap $ uncurry replicate
weightedSum = sum . map (\(i, x) -> i * x)
